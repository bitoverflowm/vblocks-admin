// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const RpPs = sequelize.define('rpPs', {
    deliveryTimeFrom: {
      type: DataTypes.BIGINT,
    },
    deliveryTimeTo: {
      type: DataTypes.BIGINT,
    },
    shape: {
      type: DataTypes.STRING,
    },
    volume: {
      type: DataTypes.INTEGER,
    },
    primaryPowerSource: {
      type: DataTypes.STRING,
    },
    recVolume: {
      type: DataTypes.INTEGER,
      field: 'RECVolume',
    },
    recAttribute: {
      type: DataTypes.STRING,
      field: 'RECAttribute',
    },
    initialResponseBy: {
      type: DataTypes.BIGINT,
    },
    timezone: {
      type: DataTypes.STRING,
    },
    totalEstimateEnergyValue: {
      type: DataTypes.DOUBLE,
    },
    totalEstimateEnergyMonthlyValue: {
      type: DataTypes.DOUBLE,
    },
    totalEstimateRecValue: {
      type: DataTypes.DOUBLE,
      field: 'totalEstimateRECValue',
    },
    totalEstimateRecMonthlyValue: {
      type: DataTypes.DOUBLE,
      field: 'totalEstimateRECMonthlyValue',
    },
    energyFee: {
      type: DataTypes.DOUBLE,
    },
    recFee: {
      type: DataTypes.DOUBLE,
      field: 'RECFee',
    },
    maxHourPeak: {
      type: DataTypes.DOUBLE,
    },
    status: {
      type: DataTypes.STRING,
    },
    escrowReciepts: {
      type: DataTypes.ARRAY(DataTypes.STRING),
    },
    sellerRanking: {
      type: DataTypes.ARRAY(DataTypes.INTEGER),
    },
    escrowDueBy: {
      type: DataTypes.BIGINT,
    },
    lastPaymentToSellerOn: {
      type: DataTypes.BIGINT,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'RPPs',
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  RpPs.associate = (models) => {
    RpPs.belongsTo(models.buyers, {
      foreignKey: {
        name: 'buyerIdKey',
        field: 'buyerId',
      },
      target: {
        name: 'userId',
      },
      as: 'buyer',
    });
    RpPs.belongsTo(models.zones, {
      foreignKey: {
        name: 'isOzoneIdKey',
        field: 'ISOzoneId',
      },
      as: 'isOzone',
    });
    RpPs.belongsTo(models.reCs, {
      foreignKey: {
        name: 'recIdKey',
        field: 'RECId',
      },
      as: 'rec',
    });
    RpPs.belongsTo(models.sellers, {
      foreignKey: {
        name: 'sellerIdKey',
        field: 'sellerId',
      },
      target: {
        name: 'userId',
      },
      as: 'seller',
    });
    RpPs.hasMany(models.bids, {
      foreignKey: {
        name: 'rppIdKey',
        field: 'RPPId',
      },
      as: 'rppBids',
    });
    RpPs.hasMany(models.transactions, {
      foreignKey: {
        name: 'rppIdKey',
        field: 'RPPId',
      },
      as: 'rppTransactions',
    });
  };

  return RpPs;
};
